
import os,sys
import time
import csv
import numpy as np
import matplotlib as mpl
if os.environ.get('DISPLAY','') == '':
    print('no display found. Using non-interactive Agg backend')
    mpl.use('Agg')
import matplotlib.pyplot as plt
# plt.rcParams.update({'font.size': 18})
import matplotlib
from numpy.random import randn
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
plt.rcParams.update({'font.size': 18})


def to_percent(y, position):
    # Ignore the passed in position. This has the effect of scaling the default
    # tick locations.
    s = '%.0f' % (100 * y * 0.025 )

    # The percent symbol needs escaping in latex
    if matplotlib.rcParams['text.usetex'] is True:
        return s + r'$\%$'
    else:
        return s + '%'
fig, ax = plt.subplots()
    # Generate a normal distribution, center at x=0 and y=5
x = [40.374999996856786,37.830000001122244,27.239999999437714,23.14000000114902,25.894999998854473,26.43000000171014,25.16499999910593,25.47000000049593,24.985000000015134,25.709999998070998,30.910000001313165,24.385000000620494,24.225000001024455,25.409999998373678,24.969999998575076,25.059999999939464,24.965000000520376,25.185000002238667,25.23999999903026,25.069999999686843,23.935000001074513,26.169999997364357,27.070000000094296,22.98500000324566,25.984999996580882,23.5850000026403,25.489999999990687,27.364999998098938,24.750000000494765,24.03500000218628,26.08499999769265,24.85000000160653,25.92000000004191,23.994999999558786,23.9000000001397,24.965000000520376,25.149999997665873,24.965000000520376,24.730000001000008,25.665000001026783,25.489999999990687,26.21999999973923,22.38500000021304,25.62499999839929,24.3399999999383,27.42500000022119,24.144999999407446,23.895000002085,25.08499999748892,26.160000001254957,22.31000000028871,27.34000000054948,27.65499999804888,23.315000002185116,24.80499999728636,26.835000000573928,22.059999999328284,23.860000001150183,27.095000001281733,25.740000000951113,24.309999997058185,25.110000002314337,24.664999997185078,26.195000002189772,22.82500000001164,26.13999999812222,23.895000002085,24.649999999383,26.00499999971362,24.92500000153086,24.80499999728636,26.615000002493616,23.554999999760184,25.37999999913154,25.069999999686843,24.815000000671716,25.37500000107684,24.979999998322455,24.744999998802086,24.830000002111774,25.38999999887892,24.19999999983702,25.069999999686843,24.765000001934823,25.54500000042026,24.319999996805564,25.270000001910375,26.535000000876607,23.80999999877531,24.3350000018836,25.434999999561114,26.52499999749125,24.230000002717134,24.49499999784166,26.085000001330627,24.79999999923166,25.17499999885331,24.520000002667075,25.115000000369037,25.214999997842824,25.265000000217697,24.379999998927815,25.23500000097556,24.70499999981257,24.525000000721775,25.02000000094995,25.16999999716063,24.915000001783483,25.22500000122818,26.20999999999185,21.889999999984866,27.164999999513384,25.01999999731197,24.375000000873115,24.6450000013283,25.369999999384163,25.15499999935855,25.035000002390007,25.064999997994164,24.27000000170665,25.259999998525018,24.505000001227017,24.009999997360865,25.865000003250316,25.644999997894047,24.835000000166474,24.809999998979038,24.950000002718298,24.985000000015134,23.82500000021537,25.369999999384163,27.12999999857857,23.80500000072061,24.769999999989523,25.105000000621658,26.409999998577405,24.71499999955995,24.209999999584397,25.255000000470318,27.229999999690335,22.130000001197914,25.484999998298008,25.340000000142027,22.870000000693835,26.030000000901055,26.939999999740394,23.939999999129213,23.225000000820728,26.255000000674045,24.365000001125736,25.0899999991816,26.839999998628628,23.040000000037253,24.610000000393484,24.10500000041793,25.255000000470318,27.03499999915948,25.01000000120257,25.405000000318978,24.94999999908032,25.22999999928288,26.06500000183587,22.91999999943073,26.849999998376006,23.74500000223634,25.939999999536667,24.304999999003485,23.89000000039232,26.43999999781954,27.815000001282897,23.710000001301523,25.00999999756459,24.380000002565794,25.204999998095445,26.80500000133179,22.785000001022127,25.274999999965075,25.879999997414416,24.545000000216532,25.359999999636784,24.85000000160653,23.545000000012806,26.115000000572763,25.705000000016298,23.934999997436535,24.740000000747386,25.22999999928288,27.895000002899906,22.929999999178108,25.53500000067288,23.489999999583233,27.50000000014552,24.33000000019092,22.90999999968335,25.719999997818377,26.67000000292319,23.854999999457505,24.72999999736203,26.06500000183587,24.369999999180436,28.39500000118278,24.150000001100125,24.620000000140863,25.674999997136183,24.840000001859153,25.040000000444707,24.86499999940861,26.74000000115484,25.134999999863794,24.33499999824562,24.454999998852145,24.300000000948785,25.37999999913154,26.330000000598375,24.840000001859153,25.15999999741325,24.745000002440065,25.574999999662396,25.184999998600688,25.250000002415618,24.95499999713502,26.085000001330627,24.205000001529697,27.28499999648193,23.95000000251457,25.08499999748892,24.655000001075678,25.270000001910375,24.249999998573912,25.45000000100117,24.63499999794294,25.180000000545988,25.290000001405133,24.624999998195563,25.345000001834705,24.884999998903368,24.92500000153086,24.170000000594882,24.94999999908032,26.630000000295695,23.174999998445855,25.665000001026783,26.464999999006977,22.60999999998603,25.255000000470318,24.284999999508727,27.365000001736917,23.170000000391155,24.919999999838183,25.54499999678228,25.475000002188608,24.33499999824562,24.075000001175795,25.655000001279404,25.24499999708496,25.14500000324915,24.924999997892883,25.330000000394648,24.675000000570435,25.659999999334104,24.525000000721775,25.09999999892898,24.659999999130378,26.350000000093132,24.575000003096648,24.969999998575076,24.87000000110129,25.00499999950989,24.299999997310806,25.38500000082422,24.905000002036104,24.42499999961001,26.15999999761698,23.410000001604203,25.180000000545988,26.8949999990582,22.260000001551816,24.539999998523854,25.23999999903026,25.120000002061715,26.470000000699656,24.174999998649582,25.47499999855063,24.0250000024389,26.470000000699656,25.604999998904532,24.86499999940861,25.030000000697328,24.139999997714767,25.274999999965075,26.050000000395812,24.48999999978696,24.800000002869638,25.02499999900465,24.969999998575076,25.280000001657754,25.16000000105123,24.669999998877756,24.835000000166474,24.79999999923166,24.055000001681037,25.964999997086124,25.200000000040745,24.56000000165659,25.62000000034459,25.634999998146668,25.970000002416782,26.699999998527346,23.379999998724088,25.00000000145519,26.66500000123051,23.344999997789273,23.51000000271597,25.32999999675667,24.595000002591405,27.614999999059364,24.695000000065193,24.505000001227017,24.57999999751337,24.450000000797445,25.349999999889405,25.140000001556473,26.324999998905696,25.519999999232823,24.809999998979038,24.980000001960434,25.519999999232823,25.480000000243308,24.04999999998836,25.430000001506414,27.084999997896375,24.94500000102562,24.34999999968568,24.42499999961001,25.01499999925727,25.175000002491288,25.289999997767154,24.72000000125263,24.87499999915599,27.434999999968568,26.180000000749715,26.13999999812222,24.70000000175787,25.180000000545988,26.644999998097774,22.75000000008731,24.93500000127824,24.649999999383,26.770000000396976,25.200000000040745,26.499999999941792,26.614999998855637,21.285000002535526,25.429999997868435,25.820000002568122,24.659999999130378,25.190000000293367,25.30499999920721,24.815000000671716,26.119999998627463,23.97000000200933,25.07999999943422,25.480000000243308,24.839999998221174,25.30499999920721,24.42499999961001,25.24000000266824,26.22499999779393,24.49999999953434,25.24500000072294,23.864999999204883,25.61500000228989,26.099999999132706,27.04000000085216,22.69999999771244,25.250000002415618,25.349999999889405,25.17000000079861,25.604999998904532,24.355000001378357,25.139999997918494,25.02000000094995,24.959999998827698,24.71000000150525,25.529999998980202,24.284999999508727,25.115000000369037,24.87000000110129,25.47000000049593,25.819999998930143,24.92999999958556,25.23500000097556,26.80999999938649,23.795000000973232,24.70999999786727,25.430000001506414,25.424999999813735,24.085000000923174,24.924999997892883,24.915000001783483,24.444999999104766,25.31499999895459,24.7750000016822,27.50000000014552,24.965000000520376,23.934999997436535,24.095000000670552,25.649999999586726,24.455000002490124,25.034999998752028,23.624999997991836,26.545000000623986,26.15499999956228,24.985000000015134,24.670000002515735,25.00499999950989,25.219999999535503,26.545000000623986,23.464999998395797,23.680000002059387,26.190000000497093,26.839999998628628,23.314999998547137,24.750000000494765,26.310000001103617,24.209999999584397,24.86000000135391,24.05499999804306,24.960000002465677,25.47499999855063,25.939999999536667,25.819999998930143,24.810000002617016,25.24499999708496,25.415000000066357,24.910000000090804,25.23500000097556,24.85000000160653,24.460000000544824,24.544999996578554,25.935000001481967,25.894999998854473,24.650000003020978,24.25999999832129,26.470000000699656,27.064999998401618,25.349999999889405,24.615000002086163,23.939999999129213,25.064999997994164,24.63500000158092,25.799999999435386,25.430000001506414,25.219999999535503,25.600000000849832,25.299999997514533,26.540000002569286,23.009999997157138,26.050000000395812,26.030000000901055,24.809999998979038,26.710000001912704,24.669999998877756,25.935000001481967,24.985000000015134,24.224999997386476,24.755000002187444,25.330000000394648,24.894999998650746,25.440000001253793,24.604999998700805,25.340000000142027,27.04000000085216,22.269999997661216,27.975000000878936,24.825000000419095,24.610000000393484,24.685000000317814,25.31499999895459,25.15499999935855,27.360000000044238,23.28500000294298,25.00999999756459,25.105000000621658,24.93500000127824,24.0300000004936,26.179999997111736,27.010000001610024,24.460000000544824,25.209999999788124,24.904999998398125,24.380000002565794,25.23999999903026,25.429999997868435,23.909999999887077,26.88000000125612,25.825000000622822,24.25999999832129,26.320000000850996,25.69500000026892]
ave = np.mean(x)
for i in range (len(x)):
    x[i] = x[i] - ave
    # if x[i] > 3.0:
    #     x[i] = 3.0
    # if x[i] < -3.0:
    #     x[i] = -3.0
    x[i] = x[i] / ave
# Make a normed histogram. It'll be multiplied by 100 later.
plt.hist(x, bins=12, density=1, range=(-0.15, 0.15))

# Create the formatter using the function to_percent. This multiplies all the
# default labels by 100, making them all percentages
formatter = FuncFormatter(to_percent)

# Set the formatter
plt.gca().yaxis.set_major_formatter(formatter)
# plt.set_xlabel('Number of Websites')
# plt.set_ylabel('Percentage')
ax.set_xlabel('Normalized error')
ax.set_ylabel('Probability density')
fig.tight_layout()
# axs[1].hist(y, bins=n_bins)
plt.savefig("/home/ubuntu/Sites/FlaskApp/FlaskApp/templates/Data/"+ 'demo_6' +r".eps")
# plt.savefig("/home/ubuntu/Sites/FlaskApp/FlaskApp/templates/Data/"+ 'demo_6' +r".eps")
